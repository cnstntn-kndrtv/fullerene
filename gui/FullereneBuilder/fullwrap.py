# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fullwrap', [dirname(__file__)])
        except ImportError:
            import _fullwrap
            return _fullwrap
        if fp is not None:
            try:
                _mod = imp.load_module('_fullwrap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fullwrap = swig_import_helper()
    del swig_import_helper
else:
    import _fullwrap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fullwrap.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _fullwrap.SwigPyIterator_value(self)
    def incr(self, n=1): return _fullwrap.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _fullwrap.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _fullwrap.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _fullwrap.SwigPyIterator_equal(self, *args)
    def copy(self): return _fullwrap.SwigPyIterator_copy(self)
    def next(self): return _fullwrap.SwigPyIterator_next(self)
    def __next__(self): return _fullwrap.SwigPyIterator___next__(self)
    def previous(self): return _fullwrap.SwigPyIterator_previous(self)
    def advance(self, *args): return _fullwrap.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _fullwrap.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _fullwrap.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _fullwrap.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _fullwrap.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _fullwrap.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _fullwrap.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _fullwrap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Entry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isomer"] = _fullwrap.Entry_isomer_set
    __swig_getmethods__["isomer"] = _fullwrap.Entry_isomer_get
    if _newclass:isomer = _swig_property(_fullwrap.Entry_isomer_get, _fullwrap.Entry_isomer_set)
    __swig_setmethods__["group"] = _fullwrap.Entry_group_set
    __swig_getmethods__["group"] = _fullwrap.Entry_group_get
    if _newclass:group = _swig_property(_fullwrap.Entry_group_get, _fullwrap.Entry_group_set)
    __swig_setmethods__["RSPI"] = _fullwrap.Entry_RSPI_set
    __swig_getmethods__["RSPI"] = _fullwrap.Entry_RSPI_get
    if _newclass:RSPI = _swig_property(_fullwrap.Entry_RSPI_get, _fullwrap.Entry_RSPI_set)
    __swig_setmethods__["PNI"] = _fullwrap.Entry_PNI_set
    __swig_getmethods__["PNI"] = _fullwrap.Entry_PNI_get
    if _newclass:PNI = _swig_property(_fullwrap.Entry_PNI_get, _fullwrap.Entry_PNI_set)
    __swig_setmethods__["HNI"] = _fullwrap.Entry_HNI_set
    __swig_getmethods__["HNI"] = _fullwrap.Entry_HNI_get
    if _newclass:HNI = _swig_property(_fullwrap.Entry_HNI_get, _fullwrap.Entry_HNI_set)
    __swig_setmethods__["NeHOMO"] = _fullwrap.Entry_NeHOMO_set
    __swig_getmethods__["NeHOMO"] = _fullwrap.Entry_NeHOMO_get
    if _newclass:NeHOMO = _swig_property(_fullwrap.Entry_NeHOMO_get, _fullwrap.Entry_NeHOMO_set)
    __swig_setmethods__["NedgeHOMO"] = _fullwrap.Entry_NedgeHOMO_set
    __swig_getmethods__["NedgeHOMO"] = _fullwrap.Entry_NedgeHOMO_get
    if _newclass:NedgeHOMO = _swig_property(_fullwrap.Entry_NedgeHOMO_get, _fullwrap.Entry_NedgeHOMO_set)
    __swig_setmethods__["HLgap"] = _fullwrap.Entry_HLgap_set
    __swig_getmethods__["HLgap"] = _fullwrap.Entry_HLgap_get
    if _newclass:HLgap = _swig_property(_fullwrap.Entry_HLgap_get, _fullwrap.Entry_HLgap_set)
    __swig_setmethods__["ncycham"] = _fullwrap.Entry_ncycham_set
    __swig_getmethods__["ncycham"] = _fullwrap.Entry_ncycham_get
    if _newclass:ncycham = _swig_property(_fullwrap.Entry_ncycham_get, _fullwrap.Entry_ncycham_set)
    __swig_setmethods__["INMR"] = _fullwrap.Entry_INMR_set
    __swig_getmethods__["INMR"] = _fullwrap.Entry_INMR_get
    if _newclass:INMR = _swig_property(_fullwrap.Entry_INMR_get, _fullwrap.Entry_INMR_set)
    def __init__(self, *args): 
        this = _fullwrap.new_Entry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fullwrap.delete_Entry
    __del__ = lambda self : None;
Entry_swigregister = _fullwrap.Entry_swigregister
Entry_swigregister(Entry)

class FullereneSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FullereneSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FullereneSelect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["db"] = _fullwrap.FullereneSelect_db_set
    __swig_getmethods__["db"] = _fullwrap.FullereneSelect_db_get
    if _newclass:db = _swig_property(_fullwrap.FullereneSelect_db_get, _fullwrap.FullereneSelect_db_set)
    __swig_setmethods__["has_db"] = _fullwrap.FullereneSelect_has_db_set
    __swig_getmethods__["has_db"] = _fullwrap.FullereneSelect_has_db_get
    if _newclass:has_db = _swig_property(_fullwrap.FullereneSelect_has_db_get, _fullwrap.FullereneSelect_has_db_set)
    def __init__(self, *args): 
        this = _fullwrap.new_FullereneSelect(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_fullerenes(self, *args): return _fullwrap.FullereneSelect_get_fullerenes(self, *args)
    def get_triangulation(self, *args): return _fullwrap.FullereneSelect_get_triangulation(self, *args)
    def get_coordinates(self, *args): return _fullwrap.FullereneSelect_get_coordinates(self, *args)
    __swig_destroy__ = _fullwrap.delete_FullereneSelect
    __del__ = lambda self : None;
FullereneSelect_swigregister = _fullwrap.FullereneSelect_swigregister
FullereneSelect_swigregister(FullereneSelect)

class IsomerDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsomerDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsomerDB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _fullwrap.IsomerDB_N_set
    __swig_getmethods__["N"] = _fullwrap.IsomerDB_N_get
    if _newclass:N = _swig_property(_fullwrap.IsomerDB_N_get, _fullwrap.IsomerDB_N_set)
    __swig_setmethods__["Nisomers"] = _fullwrap.IsomerDB_Nisomers_set
    __swig_getmethods__["Nisomers"] = _fullwrap.IsomerDB_Nisomers_get
    if _newclass:Nisomers = _swig_property(_fullwrap.IsomerDB_Nisomers_get, _fullwrap.IsomerDB_Nisomers_set)
    __swig_getmethods__["number_isomers"] = lambda x: _fullwrap.IsomerDB_number_isomers
    if _newclass:number_isomers = staticmethod(_fullwrap.IsomerDB_number_isomers)
    __swig_getmethods__["symmetries"] = lambda x: _fullwrap.IsomerDB_symmetries
    if _newclass:symmetries = staticmethod(_fullwrap.IsomerDB_symmetries)
    def __init__(self): 
        this = _fullwrap.new_IsomerDB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fullwrap.delete_IsomerDB
    __del__ = lambda self : None;
IsomerDB_swigregister = _fullwrap.IsomerDB_swigregister
IsomerDB_swigregister(IsomerDB)

def IsomerDB_number_isomers(*args):
  return _fullwrap.IsomerDB_number_isomers(*args)
IsomerDB_number_isomers = _fullwrap.IsomerDB_number_isomers

def IsomerDB_symmetries(*args):
  return _fullwrap.IsomerDB_symmetries(*args)
IsomerDB_symmetries = _fullwrap.IsomerDB_symmetries

class entryvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, entryvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, entryvector, name)
    __repr__ = _swig_repr
    def iterator(self): return _fullwrap.entryvector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fullwrap.entryvector___nonzero__(self)
    def __bool__(self): return _fullwrap.entryvector___bool__(self)
    def __len__(self): return _fullwrap.entryvector___len__(self)
    def pop(self): return _fullwrap.entryvector_pop(self)
    def __getslice__(self, *args): return _fullwrap.entryvector___getslice__(self, *args)
    def __setslice__(self, *args): return _fullwrap.entryvector___setslice__(self, *args)
    def __delslice__(self, *args): return _fullwrap.entryvector___delslice__(self, *args)
    def __delitem__(self, *args): return _fullwrap.entryvector___delitem__(self, *args)
    def __getitem__(self, *args): return _fullwrap.entryvector___getitem__(self, *args)
    def __setitem__(self, *args): return _fullwrap.entryvector___setitem__(self, *args)
    def append(self, *args): return _fullwrap.entryvector_append(self, *args)
    def empty(self): return _fullwrap.entryvector_empty(self)
    def size(self): return _fullwrap.entryvector_size(self)
    def clear(self): return _fullwrap.entryvector_clear(self)
    def swap(self, *args): return _fullwrap.entryvector_swap(self, *args)
    def get_allocator(self): return _fullwrap.entryvector_get_allocator(self)
    def begin(self): return _fullwrap.entryvector_begin(self)
    def end(self): return _fullwrap.entryvector_end(self)
    def rbegin(self): return _fullwrap.entryvector_rbegin(self)
    def rend(self): return _fullwrap.entryvector_rend(self)
    def pop_back(self): return _fullwrap.entryvector_pop_back(self)
    def erase(self, *args): return _fullwrap.entryvector_erase(self, *args)
    def __init__(self, *args): 
        this = _fullwrap.new_entryvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fullwrap.entryvector_push_back(self, *args)
    def front(self): return _fullwrap.entryvector_front(self)
    def back(self): return _fullwrap.entryvector_back(self)
    def assign(self, *args): return _fullwrap.entryvector_assign(self, *args)
    def resize(self, *args): return _fullwrap.entryvector_resize(self, *args)
    def insert(self, *args): return _fullwrap.entryvector_insert(self, *args)
    def reserve(self, *args): return _fullwrap.entryvector_reserve(self, *args)
    def capacity(self): return _fullwrap.entryvector_capacity(self)
    __swig_destroy__ = _fullwrap.delete_entryvector
    __del__ = lambda self : None;
entryvector_swigregister = _fullwrap.entryvector_swigregister
entryvector_swigregister(entryvector)

class stringvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringvector, name)
    __repr__ = _swig_repr
    def iterator(self): return _fullwrap.stringvector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fullwrap.stringvector___nonzero__(self)
    def __bool__(self): return _fullwrap.stringvector___bool__(self)
    def __len__(self): return _fullwrap.stringvector___len__(self)
    def pop(self): return _fullwrap.stringvector_pop(self)
    def __getslice__(self, *args): return _fullwrap.stringvector___getslice__(self, *args)
    def __setslice__(self, *args): return _fullwrap.stringvector___setslice__(self, *args)
    def __delslice__(self, *args): return _fullwrap.stringvector___delslice__(self, *args)
    def __delitem__(self, *args): return _fullwrap.stringvector___delitem__(self, *args)
    def __getitem__(self, *args): return _fullwrap.stringvector___getitem__(self, *args)
    def __setitem__(self, *args): return _fullwrap.stringvector___setitem__(self, *args)
    def append(self, *args): return _fullwrap.stringvector_append(self, *args)
    def empty(self): return _fullwrap.stringvector_empty(self)
    def size(self): return _fullwrap.stringvector_size(self)
    def clear(self): return _fullwrap.stringvector_clear(self)
    def swap(self, *args): return _fullwrap.stringvector_swap(self, *args)
    def get_allocator(self): return _fullwrap.stringvector_get_allocator(self)
    def begin(self): return _fullwrap.stringvector_begin(self)
    def end(self): return _fullwrap.stringvector_end(self)
    def rbegin(self): return _fullwrap.stringvector_rbegin(self)
    def rend(self): return _fullwrap.stringvector_rend(self)
    def pop_back(self): return _fullwrap.stringvector_pop_back(self)
    def erase(self, *args): return _fullwrap.stringvector_erase(self, *args)
    def __init__(self, *args): 
        this = _fullwrap.new_stringvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fullwrap.stringvector_push_back(self, *args)
    def front(self): return _fullwrap.stringvector_front(self)
    def back(self): return _fullwrap.stringvector_back(self)
    def assign(self, *args): return _fullwrap.stringvector_assign(self, *args)
    def resize(self, *args): return _fullwrap.stringvector_resize(self, *args)
    def insert(self, *args): return _fullwrap.stringvector_insert(self, *args)
    def reserve(self, *args): return _fullwrap.stringvector_reserve(self, *args)
    def capacity(self): return _fullwrap.stringvector_capacity(self)
    __swig_destroy__ = _fullwrap.delete_stringvector
    __del__ = lambda self : None;
stringvector_swigregister = _fullwrap.stringvector_swigregister
stringvector_swigregister(stringvector)

class doublevector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublevector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublevector, name)
    __repr__ = _swig_repr
    def iterator(self): return _fullwrap.doublevector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fullwrap.doublevector___nonzero__(self)
    def __bool__(self): return _fullwrap.doublevector___bool__(self)
    def __len__(self): return _fullwrap.doublevector___len__(self)
    def pop(self): return _fullwrap.doublevector_pop(self)
    def __getslice__(self, *args): return _fullwrap.doublevector___getslice__(self, *args)
    def __setslice__(self, *args): return _fullwrap.doublevector___setslice__(self, *args)
    def __delslice__(self, *args): return _fullwrap.doublevector___delslice__(self, *args)
    def __delitem__(self, *args): return _fullwrap.doublevector___delitem__(self, *args)
    def __getitem__(self, *args): return _fullwrap.doublevector___getitem__(self, *args)
    def __setitem__(self, *args): return _fullwrap.doublevector___setitem__(self, *args)
    def append(self, *args): return _fullwrap.doublevector_append(self, *args)
    def empty(self): return _fullwrap.doublevector_empty(self)
    def size(self): return _fullwrap.doublevector_size(self)
    def clear(self): return _fullwrap.doublevector_clear(self)
    def swap(self, *args): return _fullwrap.doublevector_swap(self, *args)
    def get_allocator(self): return _fullwrap.doublevector_get_allocator(self)
    def begin(self): return _fullwrap.doublevector_begin(self)
    def end(self): return _fullwrap.doublevector_end(self)
    def rbegin(self): return _fullwrap.doublevector_rbegin(self)
    def rend(self): return _fullwrap.doublevector_rend(self)
    def pop_back(self): return _fullwrap.doublevector_pop_back(self)
    def erase(self, *args): return _fullwrap.doublevector_erase(self, *args)
    def __init__(self, *args): 
        this = _fullwrap.new_doublevector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fullwrap.doublevector_push_back(self, *args)
    def front(self): return _fullwrap.doublevector_front(self)
    def back(self): return _fullwrap.doublevector_back(self)
    def assign(self, *args): return _fullwrap.doublevector_assign(self, *args)
    def resize(self, *args): return _fullwrap.doublevector_resize(self, *args)
    def insert(self, *args): return _fullwrap.doublevector_insert(self, *args)
    def reserve(self, *args): return _fullwrap.doublevector_reserve(self, *args)
    def capacity(self): return _fullwrap.doublevector_capacity(self)
    __swig_destroy__ = _fullwrap.delete_doublevector
    __del__ = lambda self : None;
doublevector_swigregister = _fullwrap.doublevector_swigregister
doublevector_swigregister(doublevector)

class intvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intvector, name)
    __repr__ = _swig_repr
    def iterator(self): return _fullwrap.intvector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fullwrap.intvector___nonzero__(self)
    def __bool__(self): return _fullwrap.intvector___bool__(self)
    def __len__(self): return _fullwrap.intvector___len__(self)
    def pop(self): return _fullwrap.intvector_pop(self)
    def __getslice__(self, *args): return _fullwrap.intvector___getslice__(self, *args)
    def __setslice__(self, *args): return _fullwrap.intvector___setslice__(self, *args)
    def __delslice__(self, *args): return _fullwrap.intvector___delslice__(self, *args)
    def __delitem__(self, *args): return _fullwrap.intvector___delitem__(self, *args)
    def __getitem__(self, *args): return _fullwrap.intvector___getitem__(self, *args)
    def __setitem__(self, *args): return _fullwrap.intvector___setitem__(self, *args)
    def append(self, *args): return _fullwrap.intvector_append(self, *args)
    def empty(self): return _fullwrap.intvector_empty(self)
    def size(self): return _fullwrap.intvector_size(self)
    def clear(self): return _fullwrap.intvector_clear(self)
    def swap(self, *args): return _fullwrap.intvector_swap(self, *args)
    def get_allocator(self): return _fullwrap.intvector_get_allocator(self)
    def begin(self): return _fullwrap.intvector_begin(self)
    def end(self): return _fullwrap.intvector_end(self)
    def rbegin(self): return _fullwrap.intvector_rbegin(self)
    def rend(self): return _fullwrap.intvector_rend(self)
    def pop_back(self): return _fullwrap.intvector_pop_back(self)
    def erase(self, *args): return _fullwrap.intvector_erase(self, *args)
    def __init__(self, *args): 
        this = _fullwrap.new_intvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fullwrap.intvector_push_back(self, *args)
    def front(self): return _fullwrap.intvector_front(self)
    def back(self): return _fullwrap.intvector_back(self)
    def assign(self, *args): return _fullwrap.intvector_assign(self, *args)
    def resize(self, *args): return _fullwrap.intvector_resize(self, *args)
    def insert(self, *args): return _fullwrap.intvector_insert(self, *args)
    def reserve(self, *args): return _fullwrap.intvector_reserve(self, *args)
    def capacity(self): return _fullwrap.intvector_capacity(self)
    __swig_destroy__ = _fullwrap.delete_intvector
    __del__ = lambda self : None;
intvector_swigregister = _fullwrap.intvector_swigregister
intvector_swigregister(intvector)

# This file is compatible with both classic and new-style classes.


